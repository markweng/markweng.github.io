<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>markweng</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://markweng.com/"/>
  <updated>2017-02-20T06:34:58.000Z</updated>
  <id>http://markweng.com/</id>
  
  <author>
    <name>cheng weng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人简历</title>
    <link href="http://markweng.com/2017/02/20/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    <id>http://markweng.com/2017/02/20/个人简历/</id>
    <published>2017-02-20T06:34:36.000Z</published>
    <updated>2017-02-20T06:34:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发任务"><a href="#开发任务" class="headerlink" title="开发任务"></a>开发任务</h1><h2 id="先讲讲怎样才是一份好的技术简历"><a href="#先讲讲怎样才是一份好的技术简历" class="headerlink" title="先讲讲怎样才是一份好的技术简历"></a>先讲讲怎样才是一份好的技术简历</h2><p>首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。</p>
<ul>
<li>Feature：是什么</li>
<li>Advantage：比别人好在哪些地方</li>
<li>Benefit：如果雇佣你，招聘方会得到什么好处 </li>
</ul>
<p>其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。</p>
<p>举个例子，下边内容是虚构的：</p>
<p>2006年，我参与了手机XX网发布系统WAPCMS的开发（<code>这部分是大家都会写的</code>）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（<code>这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。</code>）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（<code>通过量化的数字来增强可信度</code>）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（<code>这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。</code>）。</p>
<p>有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。</p>
<p>具体、量化、有说服力，是技术简历特别需要注重的地方。</p>
<p>（以上内容在写完简历后，对每一段进行评估，完成后再删除）</p>
<hr>
<h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><ul>
<li>手机：  18698589213 </li>
<li>Email：dvweng@163.com </li>
<li>微信：  cz85963921</li>
</ul>
<hr>
<h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul>
<li>翁成/男/1992 </li>
<li>本科/河南理工大学/软件工程 </li>
<li>工作年限：3年</li>
<li>技术博客：<a href="https://www.markweng.space" target="_blank" rel="external">https://www.markweng.space</a> </li>
<li>Github: <a href="https://github.com/markweng" target="_blank" rel="external">https://github.com/markweng</a> </li>
<li>期望职位：iOS开发工程师</li>
<li>期望薪资：税前月薪12k~14k，特别喜欢的公司可例外</li>
<li>期望城市：杭州</li>
</ul>
<hr>
<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><h2 id="杭州智学教育科技有限公司-（-2016年3月-至今-）"><a href="#杭州智学教育科技有限公司-（-2016年3月-至今-）" class="headerlink" title="杭州智学教育科技有限公司 （ 2016年3月 ~ 至今 ）"></a>杭州智学教育科技有限公司 （ 2016年3月 ~ 至今 ）</h2><p>职责 :负责“智学教育老师端”、“智学教育家长端”及“智学幼教老师”APP在iOS平台下的开发，根据市场和产品需求，完成开发。作为核心开发人员，我不仅完成了相应功能模块的编码，而且对代码进行了封装，在入职一个月之后iOS进度一直优先于Andriod进度，在试用期获得了提前转正的资格。在入职半年时为公司招了一位实习生，并带领熟悉业务直到转正。</p>
<h3 id="智学教育老师端"><a href="#智学教育老师端" class="headerlink" title="智学教育老师端"></a>智学教育老师端</h3><p>项目职责：我在此项目负责了各功能模块的开发、JPush集成、环信im集成、类似支付宝的应用管理、朋友圈等。在该项目中数据请求使用AFNetworking,解析使用JSONModel,界面绘制使用代码+XIB快速完成开发。并对AFN根据公司接口进行二次封装，使用更加方便。</p>
<p>####主要技术有： </p>
<ul>
<li>集成环信SDK，实现即时通讯功能；</li>
<li>集成极光推送SDK，实现通知公告、请假的推送；</li>
<li>集成友盟统计，实现应用的统计分析；</li>
<li>对AFN根据公司接口进行二次封装，方便使用；</li>
<li>应用管理CollectionView的拖动排序等；</li>
<li>程序内功能红点提示。</li>
</ul>
<h3 id="智学幼教老师"><a href="#智学幼教老师" class="headerlink" title="智学幼教老师"></a>智学幼教老师</h3><p>项目职责：框架的搭建及优化，第三方升级维护，测试发布。此APP因为和公司其他APP需求大同小异，所以大致框架一样，做了几点优化：<br> • 根据推送目的跳转到指定功能界面；<br> • 首页红点在点击tabbar时请求，并实现规定时间内单次请求；<br> • 推送通知栏通过别名显示对应发送人名，提高用户体验。</p>
<h3 id="智学教育家长端"><a href="#智学教育家长端" class="headerlink" title="智学教育家长端"></a>智学教育家长端</h3><p>我在此项目负责了学生定位卡功能的开发，使用了高德地图SDK,能通过卡片获取学生位置信息，设置电子围栏控制活动范围，历史轨迹获取学生活动轨迹等等。</p>
<p>####主要功能有：</p>
<ul>
<li>即时通讯、推送、地图、朋友圈；</li>
<li>该项目使用sliderView解析返回数据显示页面或者标注地图；</li>
<li>使用高德地图SDK实现位置的标注、定位、历史轨迹等功能。</li>
</ul>
<h2 id="两鲜商贸-上海-有限公司-（-2014年2月-2016年3月-）"><a href="#两鲜商贸-上海-有限公司-（-2014年2月-2016年3月-）" class="headerlink" title="两鲜商贸(上海)有限公司 （ 2014年2月 ~ 2016年3月 ）"></a>两鲜商贸(上海)有限公司 （ 2014年2月 ~ 2016年3月 ）</h2><p>职责 :参与“两鲜”APP的开发，根据开发文档进行项目开发。</p>
<h3 id="两鲜"><a href="#两鲜" class="headerlink" title="两鲜"></a>两鲜</h3><p>项目职责：根据开发文档进行模块的开发。</p>
<p>####主要技术有： </p>
<ul>
<li>OC和JS交互。 </li>
<li>定位获取当前所在城市；</li>
<li>使用NSRunloop解决ScrollView滚动时NSTimer失效问题 。 </li>
<li>第三方登录与支付。</li>
</ul>
<h3 id="时光旅行（个人项目）"><a href="#时光旅行（个人项目）" class="headerlink" title="时光旅行（个人项目）"></a>时光旅行（个人项目）</h3><p>自己闲时做的一个小应用，</p>
<hr>
<h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><p>（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）</p>
<p>以下均为我熟练使用的技能</p>
<ul>
<li>iOS开发：C/OC/swift/JS</li>
<li>设计模式：MVC/MVVM/通知/代理/工厂模式/KVO/KVC</li>
<li>数据库相关：SQLite/FMDB/CoreData</li>
<li>版本管理、文档和自动化部署工具：Svn/Git</li>
<li>APP打包上传和审核：Apple Developer网站/Itunes Connect网站/IPA/自动打包脚本</li>
<li>应用分发：蒲公英/Fir/Pre</li>
<li>统计分析：友盟/Google Analytics/Bugly</li>
<li>包管理：CocoaPods/Carthage</li>
<li>开源项目：AFNetworkng&amp;Alamofire/SDWebimage/Masonry/JSONModel/SwiftJSON/JSPatch</li>
<li>调试工具：Charles,Wireshark/Reveal/Instruments</li>
<li>云和开放平台：七牛/搬瓦工/微博开放平台/微信开放平台/腾讯开放平台</li>
</ul>
<h2 id="参考技能关键字"><a href="#参考技能关键字" class="headerlink" title="参考技能关键字"></a>参考技能关键字</h2><p>本技能关键字列表是从最近招聘PHP的数百份JD中统计出来的，括号中是出现的词频。如果你的简历要投递给有机器（简历分选系统）和不如机器（不懂技术的HR）筛选简历环节的地方，请一定从下边高频关键词中选择5～10个适合你自己的。</p>
<ul>
<li>iOS(1383)</li>
<li>iphone(312)</li>
<li>objective c(286)</li>
<li>app(276)</li>
<li>sdk(205)</li>
<li>xcode(196)</li>
<li>json(51)</li>
<li>appstore(49)</li>
<li>instruments(22)</li>
<li>github(22)</li>
<li>mvc(20)</li>
<li>im(18)</li>
</ul>
<hr>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发任务&quot;&gt;&lt;a href=&quot;#开发任务&quot; class=&quot;headerlink&quot; title=&quot;开发任务&quot;&gt;&lt;/a&gt;开发任务&lt;/h1&gt;&lt;h2 id=&quot;先讲讲怎样才是一份好的技术简历&quot;&gt;&lt;a href=&quot;#先讲讲怎样才是一份好的技术简历&quot; class=&quot;header
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dream It Possible</title>
    <link href="http://markweng.com/2017/01/16/Dream-It-Possible/"/>
    <id>http://markweng.com/2017/01/16/Dream-It-Possible/</id>
    <published>2017-01-16T03:03:38.000Z</published>
    <updated>2017-01-16T03:12:47.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=38592976&auto=0&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
    
    </summary>
    
    
      <category term="Dream It Possible" scheme="http://markweng.com/tags/Dream-It-Possible/"/>
    
  </entry>
  
  <entry>
    <title>markdown 语法</title>
    <link href="http://markweng.com/2017/01/15/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://markweng.com/2017/01/15/markdown语法/</id>
    <published>2017-01-15T05:50:02.000Z</published>
    <updated>2017-01-16T06:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p><img src="http://ojuqf49p9.bkt.clouddn.com/14203184_243794276020984_7276246916927508853_n.jpg" alt="谁来陪我说说话"></p>
<p><img src="http://ojuqf49p9.bkt.clouddn.com/A9BCF69DB45955B9C40E933B6062ED09.jpg" alt="🙄🙄"></p>
<h4 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h4><p><a href="www.baidu.com">baidu</a><br><a href="www.google.com">google</a></p>
<h4 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">NSLog</span><span class="params">(@<span class="string">"welocme!"</span>)</span></span></div></pre></td></tr></table></figure>
<h4 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h4><table>
<thead>
<tr>
<th>Option name</th>
<th>Markup</th>
<th>Result if enabled</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intra-word emphasis</td>
<td>So A*maz*ing</td>
<td>So A<em>maz</em>ing</td>
<td></td>
</tr>
<tr>
<td>Strikethrough</td>
<td>~~Much wow~~</td>
<td><del>Much wow</del></td>
<td></td>
</tr>
<tr>
<td>Underline [^under]</td>
<td>_So doge_</td>
<td><u>So doge</u></td>
<td></td>
</tr>
<tr>
<td>Quote [^quote]</td>
<td>\”Such editor\”</td>
<td><q>Such editor</q></td>
<td></td>
</tr>
<tr>
<td>Highlight</td>
<td>\==So good\==</td>
<td><mark>So good</mark></td>
<td></td>
</tr>
<tr>
<td>Superscript</td>
<td>hoge\^(fuga)</td>
<td>hoge<sup>fuga</sup></td>
<td></td>
</tr>
<tr>
<td>Autolink</td>
<td><a href="http://t.co" target="_blank" rel="external">http://t.co</a></td>
<td><a href="http://t.co" target="_blank" rel="external">http://t.co</a></td>
<td></td>
</tr>
<tr>
<td>Footnotes</td>
<td>[\^4] and [\^4]:</td>
<td>[^4] and footnote 4</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojuqf49p9.bkt.clouddn.com/14203184_2437942760
    
    </summary>
    
    
      <category term="test_image" scheme="http://markweng.com/tags/test-image/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序</title>
    <link href="http://markweng.com/2017/01/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://markweng.com/2017/01/15/微信小程序/</id>
    <published>2017-01-15T05:37:53.000Z</published>
    <updated>2017-01-17T11:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说的是配置文件app.json.下面是官方给出的例子.</p>
<pre><code>{&quot;pages&quot;: [ &quot;pages/index/index&quot;, &quot;pages/logs/index&quot; ],
&quot;window&quot;: { &quot;navigationBarTitleText&quot;: &quot;Demo&quot; },
&quot;tabBar&quot;: { &quot;list&quot;: [{ &quot;pagePath&quot;: &quot;pages/index/index&quot;, &quot;text&quot;: &quot;首页&quot; }, { &quot;pagePath&quot;: &quot;pages/logs/logs&quot;, &quot;text&quot;: &quot;日志&quot; }] }, 
&quot;networkTimeout&quot;: { &quot;request&quot;: 10000, &quot;downloadFile&quot;: 10000 },
&quot;debug&quot;: true
}
</code></pre><p>官方给出了app.json五个配置项列表.<br>(pages(Array), window(Object), tabBar(Object), networkTimeout(Object), debug(Boolean)),接着我们就详细的分下一下这几个配置项.<br>pages</p>
<p>它的作用是配置小程序的页面,这个配置项是必填的,它接受一个数组,里面的每一项都是字符串,从上面给出的代码: “pages”: [ “pages/index/index”, “pages/logs/index” ] 可以看出,每一项分别对应的都是实现文件的路径以及他的文件名. 注意:这个配置里面的第一行配置是它的初始页面,例如上面代码的初始页面就是index</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说的是配置文件app.json.下面是官方给出的例子.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;pages&amp;quot;: [ &amp;quot;pages/index/index&amp;quot;, &amp;quot;pages/logs/index&amp;quot; ],
&amp;quot;w
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://markweng.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>自动打包脚本</title>
    <link href="http://markweng.com/2017/01/15/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
    <id>http://markweng.com/2017/01/15/自动打包脚本/</id>
    <published>2017-01-15T05:24:46.000Z</published>
    <updated>2017-01-15T05:25:14.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="iOS自动打包脚本" scheme="http://markweng.com/tags/iOS%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动打包脚本</title>
    <link href="http://markweng.com/2016/04/16/iOS%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
    <id>http://markweng.com/2016/04/16/iOS自动打包脚本/</id>
    <published>2016-04-16T08:08:15.000Z</published>
    <updated>2017-01-18T09:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司项目越来越多，每次打包测试都要翻一下代码，修改一些配置，费时费事，iOS打包脚本会带来很多方便。</p>
<h4 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h4><p> 打ipa包主要依靠这两条命题： </p>
<ul>
<li>xcodebuild</li>
<li>xcrun</li>
</ul>
<p>xcodebuild 进行编译<br>xcrun 生成ipa包</p>
<h4 id="xcodebuild简介"><a href="#xcodebuild简介" class="headerlink" title="xcodebuild简介"></a>xcodebuild简介</h4><blockquote>
<p>DESCRIPTION</p>
<p>xcodebuild builds one or more targets contained in an Xcode project, or builds a scheme contained in an Xcode workspace or Xcode project.</p>
<p>Usage</p>
<p>To build an Xcode project, run xcodebuild from the directory containing your project (i.e. the directory containing the name.xcodeproj package). If you have multiple projects in the this directory you will need to use -project to indicate which project should be built. By default, xcodebuild builds the first target listed in the project, with the default build configuration. The order of the targets is a property of the project and is the same for all users of the project.</p>
<p>To build an Xcode workspace, you must pass both the -workspace and -scheme options to define the build. The parameters of the scheme will control which targets are built and how they are built, although you may pass other options to xcodebuild to override some parameters of the scheme.</p>
<p>There are also several options that display info about the installed version of Xcode or about projects or workspaces in the local directory, but which do not initiate an action. These include -list, -showBuildSettings, -showsdks, -usage, and -version.</p>
</blockquote>
<p>进入到工程所在目录（即 <strong>*</strong>.xcworkspace 或 <strong>*</strong>.xcodeproj所在路径）</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xcodebuild -version 查看xcode的版本号和<span class="keyword">build的版本号</span></div><div class="line"></div><div class="line">xcodebuild -<span class="keyword">showsdks </span>显示当前系统的SDK、及其版本</div><div class="line"></div><div class="line">xcodebuild -list 先 cd 到工程目录下执行此命令 显示target <span class="keyword">Schemes </span>等</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司项目越来越多，每次打包测试都要翻一下代码，修改一些配置，费时费事，iOS打包脚本会带来很多方便。&lt;/p&gt;
&lt;h4 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h4&gt;&lt;p&gt; 打ip
    
    </summary>
    
      <category term="技术" scheme="http://markweng.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="打包脚本" scheme="http://markweng.com/tags/%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>初学swift</title>
    <link href="http://markweng.com/2016/01/10/%E5%88%9D%E5%AD%A6swift/"/>
    <id>http://markweng.com/2016/01/10/初学swift/</id>
    <published>2016-01-10T10:02:34.000Z</published>
    <updated>2017-01-14T10:02:56.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hadoop简介</title>
    <link href="http://markweng.com/2015/12/09/Hadoop%E7%AE%80%E4%BB%8B/"/>
    <id>http://markweng.com/2015/12/09/Hadoop简介/</id>
    <published>2015-12-09T09:45:41.000Z</published>
    <updated>2017-01-14T09:47:39.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Hadoop" scheme="http://markweng.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Workspace、Project、Target and Scheme</title>
    <link href="http://markweng.com/2015/10/05/Workspace%E3%80%81Project%E3%80%81Target-and-Scheme/"/>
    <id>http://markweng.com/2015/10/05/Workspace、Project、Target-and-Scheme/</id>
    <published>2015-10-05T14:10:39.000Z</published>
    <updated>2017-01-17T09:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="官方解释："><a href="#官方解释：" class="headerlink" title="官方解释："></a>官方解释：</h4><p><a href="https://developer.apple.com/library/content/featuredarticles/XcodeConcepts/Concept-Workspace.html#//apple_ref/doc/uid/TP40009328-CH7-SW1" target="_blank" rel="external">Xcode Workspace
</a> | <a href="https://developer.apple.com/library/content/featuredarticles/XcodeConcepts/Concept-Projects.html#//apple_ref/doc/uid/TP40009328-CH5-SW1" target="_blank" rel="external">Xcode Project
</a> | <a href="https://developer.apple.com/library/content/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1" target="_blank" rel="external">Xcode Target
</a> |  <a href="https://developer.apple.com/library/content/featuredarticles/XcodeConcepts/Concept-Schemes.html#//apple_ref/doc/uid/TP40009328-CH8-SW1" target="_blank" rel="external">Xcode Scheme
</a></p>
<h4 id="Xcode-Workspace"><a href="#Xcode-Workspace" class="headerlink" title="Xcode Workspace"></a>Xcode Workspace</h4><p>如果你的开发过程中用到了Cocoapods，那么你就是已经用到了Workspace，因为你使用Cocoapods之后，你打开的那个文件就是 xxxx.xcworkspace。简单理解他就是一个Xcode文件，它包含了一个project组合，它们能够一起工作。</p>
<h4 id="Xcode-Project"><a href="#Xcode-Project" class="headerlink" title="Xcode Project"></a>Xcode Project</h4><p>简单来说就是一个项目，我们新建一个工程的时候你会发现就会有个Project。它其实是一个包含了所有文件、资源和构建信息的一个存储库。Project包含了用欧冠胡构建产品和维护这些元素之间关系的所有元素。它包含了一个或者多个Target，而这些Target制定了如何构建Products。并且一个Project定义的buildsettings对于所有的Target都是一样的，你也可以针对某个Target进行定制。<br>一个Project文件包含了以下的信息：参考的资源文件：源代码（包括头文件和实现文件）、Libraries和frameworks、资源文件、图片文件、nib文件。等等。 一个project可能是单独的一个，也可能是一个工作空间。</p>
<h4 id="Xcode-Target"><a href="#Xcode-Target" class="headerlink" title="Xcode Target"></a>Xcode Target</h4><p>一个Project可以有多个Target。而且Target是继承自Project的，也就是说如果你在Project中配置了某个东西，那么所有的Target都会生效；但是反之则不会生效。<br>    如果你现在有一个产品，你要做不同的环境出来，包括线上、预发、日常等等。这个时候你就可以来建立多个Target来实现。你先选中Targets里面的默认的第一个，然后右击弹出一个小列表：（Duplicate、Delete、Project Editor Help），顾名思义，Duplicate就是复制的意思，你可以选择一个Target进行复制，然后通过修改其General、Build Settings以及Build Phases来进行定制化修改，在Build Settings里面有一个Preprocessor Macros的选项，你可以直接设置定义宏的方式来对不同的Target进行区分。</p>
<h4 id="Xcode-Scheme"><a href="#Xcode-Scheme" class="headerlink" title="Xcode Scheme"></a>Xcode Scheme</h4><p>看Scheme之前，你必须要先了解了Target，要不然请直接忽略Scheme。一个Scheme定义了要build的target的集合，定义了一个当building的时候的配置，定义了一个测试的集合。这里需要注意一点，那就是当你Archive要发布到AppStore的时候，需要将Archive设置为Release。<br><img src="http://ojuqf49p9.bkt.clouddn.com/scheme.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;官方解释：&quot;&gt;&lt;a href=&quot;#官方解释：&quot; class=&quot;headerlink&quot; title=&quot;官方解释：&quot;&gt;&lt;/a&gt;官方解释：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/featu
    
    </summary>
    
    
      <category term="Xcode" scheme="http://markweng.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>初识swift</title>
    <link href="http://markweng.com/2014/08/20/%E5%88%9D%E8%AF%86swift/"/>
    <id>http://markweng.com/2014/08/20/初识swift/</id>
    <published>2014-08-20T12:41:40.000Z</published>
    <updated>2017-01-17T11:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><ul>
<li>像许多最近的语言一样，Swift基于LLVM，编译到原生代码。它很可能相当快，并且可以产生许多不同目标平台的原生代码。这也包括内存使用和延迟仍然重要的客户端代码。</li>
<li>在设计Swift时，『与Objective-C对象模型互操作的能力』似乎被作为一条硬约束。这可能会限制一些Swift所能安全完成的工作。</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>没有显式指针(但是参看下文inout的部分），它依赖C#式的值/引用二分类型。这是在重获因为Java式全Heap式系统而损失的性能同时不引入学习和设计负担路上的半步。(备注：Java现在也在实验值类型)。 看上去是Swift和Rust最大的区别。这也意味着你不能轻易的取另一个结构体或数组内部的地址。这很令人遗憾，但是是合理的妥协。</li>
<li>既然没有指针，自然没有真正的机制来推断所有权。当你使用引用类型的时候，它不过是一个指向共享堆的ARC指针或弱指针。Region，Unique性(Uniqueness)以及所有相关的性能增强与认知负担都不存在。</li>
<li>单继承，显式覆盖(override)和属性(properties)，以及多接口(“protocol”)继承。这是今天的标准，非常C#式的设计，看上去protocol不可以拥有默认方法。class是引用类型，structs是值类型。</li>
<li>通过extensions提供对类型的事后扩展能力。我不确定对它有没有一致性的限制，我找不到。lambda表达式似乎使用了非常Ruby式的块结构(甚至包括后置参数的样子!)。Rust一两年前使用它，现在不用了(我有点喜欢它）。也有一个方便的使用编号参数的方式，像closure的#() reader macro.</li>
<li>很棒的带有tuple和sum type的函数语言式代数类型系统，后者使用和Rust一样的enum引入。你所期待的模式匹配和解构绑定(destructuring binding)。几乎和Rust一样，不过没有用来绑定显式指针的皱纹(wrinkle). 他们也避免了Rust的模式匹配当中所有的语法歧义， 让我很沮丧(他们在名字解析之后消除歧义）。</li>
<li>结合数字类型，更好的字面量(literals)，没有隐式强制转换的本地类型推断。Yay！</li>
<li>脚本语言式（以及Go语言式）的词典(dictionary)字面量。小事，但是会很受欢迎。</li>
<li>一个基本的模块系统，没有通配符，成组import或重命名。没有可见性控制。但是通过attributes支持了重新导出。</li>
<li>没有macro系统没有满地的null，谢天谢地。相反，引入了C#和Facebook最近的Hack语言中的option类型和nullable语法糖，包括相当多的可选链式调用，强制和绑定，这很棒。</li>
<li>let和var关键字，用以区分可变(mutable)和不可变(immutable)对象。</li>
</ul>
<h2 id="奇怪的-Peculiarites"><a href="#奇怪的-Peculiarites" class="headerlink" title="奇怪的(Peculiarites)"></a>奇怪的(Peculiarites)</h2><ul>
<li>数组有奇怪的copy-on-extension语义，但是我觉得它们可能总在堆上？字符串看上去也是基于堆和Copy-on-Write的。不太清楚。</li>
<li>不清楚你自己是否或如何能实现iterator protocol.</li>
<li>参数可以是inout的，这样的参数看上去不可避免的要求一元&amp;运算符。有意思的是，像Objective-C一样，inout关键字拒绝死去。在Rust当中，在我们发展出first class region pointer(“lifetime”)系统之前，我们也干了类似的事（”parameter modes”)。参数传递模式和真正指针之间的不对称最终让我们无法忍受，不过我猜Swift不觉得这是啥大问题。</li>
<li>看上去不是一个表达式语言，我猜『没有macro系统』，所以…</li>
<li>除了代数类型没有讨论错误处理，option类型和奇怪的对”runtime error”的偶然引用。不确定Swift使用什么孤立/回复系统，或者系统是否存在。关键字”unwind”在手册当中没有出现。</li>
<li>命名参数看上去可疑地像OCaml的”OLabl”变种。我不确定这有多大的用。</li>
<li>带有检查的算术，以及16进制浮点字面量，Yay!总体来说我基本同意Bryan O’Sullivan的推特：    </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;逻辑&quot;&gt;&lt;a href=&quot;#逻辑&quot; class=&quot;headerlink&quot; title=&quot;逻辑&quot;&gt;&lt;/a&gt;逻辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;像许多最近的语言一样，Swift基于LLVM，编译到原生代码。它很可能相当快，并且可以产生许多不同目标平台的原生代码。这也包括内
    
    </summary>
    
    
      <category term="swift" scheme="http://markweng.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>注册github</title>
    <link href="http://markweng.com/2014/03/22/%E6%B3%A8%E5%86%8Cgithub/"/>
    <id>http://markweng.com/2014/03/22/注册github/</id>
    <published>2014-03-22T02:04:03.000Z</published>
    <updated>2017-01-16T02:04:36.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="配置ssh" scheme="http://markweng.com/tags/%E9%85%8D%E7%BD%AEssh/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="http://markweng.com/2013/10/13/java%E5%9F%BA%E7%A1%80/"/>
    <id>http://markweng.com/2013/10/13/java基础/</id>
    <published>2013-10-13T14:31:09.000Z</published>
    <updated>2017-01-14T10:04:52.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
